; Spencer Arnold Ram3
; Calculate the Discriminate of any three term polynomial
; b^2 - 4ac

; Jumps to the main entry point of the program
JMP _prep1

; Variables

product1: 00000000	; stores result of b^2

product2: 00000000	; stores result of A*C

product3: 00000000	; stores result of 4*product2

c: 00000000		; Count variable for looping

vara: 1			; a value of the polynomial

varb: 8			; b value of the polynomial

varc: 2			; C value of the polynomial

const: 4		; Constant 4 that is a part of discriminate formula


_prep1:	; the label 'prep1'. This is the entry point

	; Load the count variable with appropriate value
		
	LDAC varb 	; Load b into ACC

	STAC c		; Stores value of varb (from ACC) into count variable.

	JMP _loop1	; Go to loop1.


_loop1:	; Computes the first part of the discriminate (b^2)
		
	; Main Adding procedure

	LDAC product1	; Load product1 into ACC		

	MOVAC 		; Moves ACC to R

	LDAC varb 	; load varb into acc in prep for adding
		
	ADD		; Adds ACC and R Stores in ACC
		
	STAC product1 	; Stores ACC into product1. We are keeping a running sum for the multiplication	
		

	; This is the count-- procedure

	CLAC 		; Clears ACC
	
	INC 		; Makes ACC = 1

	MOVAC 	  	; Moves ! to R

	LDAC c 		; Loads Current Count into ACC

	SUB 		; Subtracts 1 from Count

	STAC c   	; Stores count
	
	JMPZ _prep2 	; If z = 1, then the loop has ended.

	JMP _loop1 	; Else loop continues


_prep2:	
		
	CLAC 		; Clears any remaining values in ACC

	LDAC varc 	; Loads varc in the ACC

	STAC c 		; Stores varc to count

	JMP _loop2	; Jumps execution to loop2


_loop2:	; Computes the second part of the discriminate (AC)
		
	LDAC product2	; Load product2 into ACC

	MOVAC 		; Moves ACC to R

	LDAC vara 	; load vara in prep for add

	ADD 		; Adds ACC and R

	STAC product2	; Store ACC in product2


	; This is the count-- procedure

	CLAC 		; Clears ACC
	
	INC 		; Makes ACC = 1

	MOVAC 	  	; Moves ! to R

	LDAC c		; Loads Current Count into ACC

	SUB 		; Subtracts 1 from Count

	STAC c   	; Stores count
	
	JMPZ _prep3 	; If z = 1, then the loop has ended.

	JMP _loop2	; Else loop continues

		
_prep3:
		
	CLAC 		; Clears any remaining values in ACC

	LDAC const 	; Loads const (4) into ACC

	STAC c		; Stores const to count

	JMP _loop3	; Jump execution to loop3



_loop3:	; Computes the third part of the discriminate 4*(AC)


	LDAC product3	; Load product2 into ACC

	MOVAC 		; Moves ACC to R

	LDAC product2 	; load vara in prep for add

	ADD 		; Adds ACC and R

	STAC product3	; Store ACC in product2



	; This is the count-- procedure

	CLAC 		; Clears ACC
	
	INC 		; Makes ACC = 1

	MOVAC 	  	; Moves ! to R

	LDAC c		; Loads Current Count into ACC

	SUB 		; Subtracts 1 from Count

	STAC c 		; stores count
	
	JMPZ _finish 	; If z = 1, then the loop has ended.

	JMP _loop3	; Else loop continues
		
		
_finish:

	; Do product1 - product3

	LDAC product3	; Loads product2 to be moved to the R reg
	
	MVAC		; Mpves product2 to R

	LDAC product1   ; Loads product1 into the ACC in preparation for subtraction

	SUB		; Subtraction instruction
	
     	OUT       	; Send Accumulator contents to Output Register

      	HALT      	; Stop execution
